# Where to get the objects from and store them back to
scape.repository:				http://localhost:3000/
scape.repositoryUser:			SCAPE
scape.repositoryPassword:		R00LZ
scape.dataPublicationUrlTemplate: \
		http://localhost:8080/execute/{id}/wd/staging
# Note: the auth base *must* end in a / character!
scape.repositoryAuthBase:		http://localhost:3000/

# Contact point for notifications
scape.planManagementService:	http://plans.scape.example.com/
scape.planManagementUser:		SCAPE
scape.planManagementPassword:	R00LZ

# Prefix for names of wrapper workflows; suffix is locked to .t2flow, and
# piece in the middle is from a controlled set
scape.wrapperPrefix:			SCAPE_outer_
# Directory in which to find wrapper workflows
scape.wrapperDirectory:			/var/taverna-server/scape

# The processor that will be spliced out
scape.dummyProcessor:			ignore
# The name of the dataflow that will have components injected into it
scape.linkingDataflow:			ObjectTransform
# The name of the processor that will be generated
scape.innerProcessor:			PreservationActionPlan

# Description of what components to insert
scape.componentRepository:		http://www.myexperiment.org/
scape.utilityComponentFamily:	SCAPE Utility Components
scape.builderComponent:			MeasuresDocBuilder
scape.builderComponentVersion:	4
scape.joinerComponent:			MeasuresDocCombiner
scape.joinerComponentVersion:	2

# Time between runs of the completion detection code, in milliseconds
scape.completionInterval:		30000

# Time to allow a plan to execute, in hours
scape.timeoutHours:				24
